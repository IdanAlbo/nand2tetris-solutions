// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //A: 0 X x x ...
    //C: 1 _ _ a c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3

    //selecting between ALU output & instruction
    //if (MSB = 0): select the A instruction (out=instruction), else: out=ALU output
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=toARegister);

    //load to A Register in 2 cases: 1. destination in C instruction 2. A instruction
    Not(in=instruction[15], out=notMSB);
    Or(a=instruction[5], b=notMSB, out=loadA);
    ARegister(in=toARegister, load=loadA, out=ARegisterOut, out[0..14]=addressM);

    DRegister(in=ALUout, load=instruction[4], out=ALUx);

    //choosing between A/D Registers as ALU input
    Mux16(a=ARegisterOut, b=inM, sel=instruction[12], out=ALUy);

    //if A instruction: compute D
    Not(in=instruction[15], out=notIn);

    And(a=instruction[11], b=instruction[15], out=zx);
    And(a=instruction[10], b=instruction[15], out=nx);
    Or(a=instruction[9], b=notIn, out=zy);
    Or(a=instruction[8], b=notIn, out=ny);
    And(a=instruction[7], b=instruction[15], out=f);
    And(a=instruction[6], b=instruction[15], out=no); 

    ALU(x=ALUx, y=ALUy, 
        zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no,
        out=ALUout, out=outM, zr=zr, ng=ng);

    //load to M Regsiter
    And(a=instruction[15], b=instruction[3], out=writeM);

    //pc logic
    //ALU outputs handling
    Or(a=ng, b=zr, out=notPos);
    Not(in=notPos, out=pos);

    //contidions checks
    And(a=pos, b=instruction[0], out=j3);
    And(a=zr, b=instruction[1], out=j2);
    And(a=ng, b=instruction[2], out=j1);
    
    //determine if should jump
    Or(a=j1, b=j2, out=j12);
    Or(a=j12, b=j3, out=j123);
    And(a=j123, b=instruction[15], out=jump);

    PC(in=ARegisterOut, load=jump, inc=true, reset=reset, out[0..14]=pc);
}